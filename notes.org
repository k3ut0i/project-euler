#+AUTHOR: k3ut0i
#+TITLE: Notes on 100-problems from project euler
#+OPTIONS: toc:nil
#+STARTUP: content, latexpreview

* Some notes on my solutions
:PROPERTIES:
:UNNUMBERED: notoc
:END:
1-25 are re-done in [[file:learning-julia.org][julia]].
** DONE 26 - Reciprocal Cycles
1. I can simulate the division method and look for cycles.
2. It feels like there is a mathematical method here
   If there is are repeating part, then Sum{r*10^-xi} will be the repeating part. where r is the sequence of digits and x is the length of repeating part. This is equal to r*Sum{10^-xi} = r/(1-10^-x). There will be 10^-a factor involved, but let us ignore that for now. Thus r*10^x/(999..9). So the denominator times 99...9 must be an integer or a non-recuring fraction that doesn't interact with this recurring part.

The intuition is there, but need to put it down concretely.
I somehow worked it through with many assumptions and arrived at the correct answer.
** DONE 27 - Quadratic Primes
- for n^2+an+b to be prime from n=0, b must be a prime and, n must be below b.
- 1+a+b must also be a prime.
- ~[(a, b) for a in (-1000:1000) for b in ps if is_prime(a+b+1)]~ gives 39k elements
- I have an idea to write a winner iterator. :| Turns out to be kind of bfs search.
  - There is a sequence of values, each of which might go to next step.
  - At any step if the next step fails, we remove it.
  - finally we are left with only winners
  - so we need two functions, _next_step_, _failed?_
  - Will be useful for pruning search spaces, also for bfs traversal search if we can allow _next_step_ to give us multiple next states.

Just brute forced it, after filtering b choices to positive and primes numbers

** DONE 28 - Number Spiral Diagonals
- length of the side of squares is [1, 3, 5, ....]
- if length of side is n, then there are 4*(n-1) numbers on that square
- the starting number is (n-2)^2+1 and ending number is n^2
- thus the diagonal numbers are (n-2)^2+(n-1), (n-2)^2+2(n-1), (n-2)^2+3(n-1), (n-2)^2+4(n-1)
- The sum of these is 4(n-2)^2+10(n-1) = 4n^2-6n+6
- we can also sum these directly as Sum(n^2) and sum(n) are simple enough
  + Have to be careful on n=1, The above quadratic gives 4 as it counts 1 itself 4 times

** DONE 29 - Distinct Powers
a^b = x^y and a < x, then x and a are both powers of some common number.
- we can reduce a^b to an^bn, where an^e = a and b*e = bn and an^e <= ub, bn <= ub
  and (an, bn) is the pair with smallest _an_ among all such possible pairs.
- If a^b = x^y, then both of them will reduce to the same pair of numbers.
- Now we just have to count the number of unique pairs
:) All this just to avoid brute-forcing by BigInts. That's just a one-liner.

** DONE 30 - Digit Fifth Powers
I need to figure out the upper bound number possible.
- For a number with (k+1) digits, 10^k is the smallest possible number and digit power sum is (k+1)*9^e. Since one is exponential and one is linear, there will be an upper bound.
- For this case 10^k > (k+1)*9^5. for k=5, we have 10^5 < 6*9^5, but 10^6 > 7*9^5. So we need only consider upto k=5, i.e., 6digit numbers, i.e., numbers below one million.

- a million iterations of a simple function(5 powers, 5 sums), it will run within 1sec

** DONE 31 - Coin Sums
Change-Making Problem:: How many ways can 2 pounds(200 pences) be formed from
1p, 2p, 5p, 10p, 20p, 50p, 1P(100p), 2P(200p)
- This can be done with combinatorics.
  + I remember doing some generating functions method to do something like this.
  + with 8 different choices, this is not a good way to get answer
- until wikipedia on _change making problem_ suggested dynamic programming. I didn't even recognize this as a simple knapsack problem!
- Brute-forcing requires going through a search space of 200*100*40*20*10*4*2 = 1_280_000_000, a billion
  + we can decrease this a lot by getting a combinatorial answer to (1p, 2p). Now the search space will just be 40*20*10*4*2 = 64_000.
    #+begin_quote
julia> @timev num_partitions_with(200, [5, 10, 20, 50, 100, 200]); nothing
  0.262925 seconds (778.84 k allocations: 70.602 MiB, 76.49% gc time)
elapsed time (ns):  262924841
gc time (ns):       201122614
bytes allocated:    74031456
pool allocs:        778823
non-pool GC allocs: 11
malloc() calls:     1
realloc() calls:    2
free() calls:       2
minor collections:  0
full collections:   1
    #+end_quote
    Not a bad reduction. 10^9 search space would have taken a lot longer.


** DONE 32 - Pandigital Products
A n-digit number is pandigital if it uses all digits 1..n exactly once.
- I might've done this before in prolog.
- I need to find bounds for A, B, C such that A*B = C is a possible pandigital product.
  + suppose A has x+1 digits, B has y+1 digits and C has z+1 digits.
    x+y+z = 6
    x+y < z+1
    x+1+y+1 > z.
    So z-2 < x+y < z+1, ie., x+y can only be z or z+1
    x+y+z can only be 2z or 2z+1 = 6. So z can only be 3.
- So should I check every divisor for every 4 digit number that has non repeating digit?
#+begin_quote
julia> @timev spf = smallest_prime_factors(10_000); sum(filter(x -> is_pandigital(x, spf), 1000:9999));nothing
  0.000591 seconds (2 allocations: 78.172 KiB)
elapsed time (ns):  591016
gc time (ns):       0
bytes allocated:    80048
pool allocs:        1
non-pool GC allocs: 0
malloc() calls:     1
free() calls:       0
minor collections:  0
full collections:   0

#+end_quote
:) less than 1ms

** DONE 33 - Digit Cancelling Fractions
- multiples of 11 are trivial cases
- foldl(*, filter(is_digit_cancelling ,...))


** DONE 34 - Digit Factorials
- Need to find bounds
  + the k digit number must be smaller than (k+1)*factorial(9)
  + the k digit number must be greater than (k+1)
  + So k >= 2 and k <= 7 (smallest 8 digit number is > 9*factorial(9))
  + 2:9_999_999
- simple brute forcing worked < 2 seconds


** DONE 35 - Circular Primes
- ~NumberTheory~ is becoming quite usefull. brute-forcing worked in < 1 second
- ~circshift~ in julia :) made things easier


** DONE 36 - Double-base Palindromes

- julia has ~digits(n, base)~; nice


** DONE 37 - Truncatable Primes
- ~f(x) = x*x~ version of function definition. I didn't realize this even after writing a Base.show method previously.
- tried out the upper bound as 1 million and that gave me 11 numbers. worked on the first try :)

** DONE 38 - Pandigital Multiples
- upper bound for the integer is 9999 since atleast two of the numbers must be concatenated. If it has 5 digits, then the result will non have 9 digits in it.
- n <= 9 since anything greater than that will give result with > 9 digits in it.
- rest is brute-force search

** DONE 39 - Integer Right Triangles
x+y+z = p, (x, y, z) form a right triangle with perimeter p. Which perimeter gives the most number of right triangles? 120 gives 3 of them.
- just brute forced it. 150ms. Is there a way to do this optimally?


** DONE 40 - Champernowne's Constant
- (10-1)x1 digit numbers, (99-9)x2 digit numbers, (999-99)x3 digit numbers ...
  - 9e(a-1)xa digit numbers
- Now we figure out for each i, to which block it belongs.
- after that with (i-sum(prev_blocks))mod(digits in each number of that block) and div gives us which number and which digit of the number
Requires careful shaping of boundries.
Sighhh... that was hairy. I was lucky it worked as fast as it did.

** DONE 41 - Pandigital Prime
- Worst case scenario, a 9-digit pandigital prime exists
  + factorial(9) numbers must be checked it they are prime.
- Hmm, there are no 8 or 9-digit pandigital primes at all
  + Only 4 and 7 digit ones; curious

** DONE 42 - Triangle Coded Numbers
Feels like a AOC question.

** DONE 43 - Substring Divisibility
- cut the factorial(10) space by a factor of 10
  + d6 must be either 0 or 5
  + d4 must be even
- more optimization can be done but just this much has allowed < 1sec runtime 

** DONE 44 - Pentagon Numbers
- Pa, Pb are the pentagon numbers which give Pa+Pb=Pc and Pa-Pb=Pd;We will iterate over Pd
  + upper bound for a is (Pd-1)/3
- d is large... iterating over d is going O(n^3)
  + Iterating over a and b themselves gave me answer faster.
  + If d was small the first strategy would've given me answer faser.

** DONE 45 - Triangular, Pentagonal, Hexagonal
https://en.wikipedia.org/wiki/Polygonal_number
40755 is simultaniously all three with indices (285, 165, 143). Find the next such number
- full brute force search. < 1ms

** DONE 46 - Goldbach's Other Conjecture
- I don't see any way to optimize this :(
- 10_000 upperbound gave me the answer

** DONE 47 - Distinct Prime Factors
- again brute forcing.

** DONE 48 - Self Powers
- I'm trying to reduce this mathematically.
  + got upto a point, but I'm not sure more reduction is impossible
- I need to define modulo arithmetic for powers, mutiplication etc...
  + I'm trying to avoid BigInts
  + julia has ~invmod~ !! nice
- :( I tried going the ~invmod~ route, So that I can just sum 10 terms...
  + it did not work. invmod requires gcd be 1.
  + I just used builtin ~powermod~ and summed all 1000 terms.


** DONE 49 - Prime Permutations
- finally had to write a choice function to get k elements from a collection
  + TODO: I should rewrite this and permutations function as iterators

** DONE 50 - Consecutive Prime Sum
- consecutive sums can be made efficient by pre-computing partial sums
- For each prime p, I need to find the bounds before checking them all
- 3secs brute-force

** DONE 51 - Prime Digit Replacements
- used ~choose~ to get choices for replacement positions
- first problem with > 5% difficulty

** DONE 52 - Permuted Multiples
- used ~Set~ for comparision


** DONE 53 - Combinatoric Selections
How many values of binomial(n, r) are greater than one-million.
- C(n, r) = C(n-1, r-1) + C(n, r-1). So if any of the summands are > 1M, then the result is also.
- We can build a 100x100 array and start building it recursively.
  + forall n. C(n, 1) = n, forall k.C(k, k) = 1.
- ~count~ is nice. I just used partial application! ~count(==(10^6), ...)~. I din't even know julia had them!!!

** DONE 54 - Poker Hands
I need to map each hand to a scoring system with the following properties:
1. uniquely determinded
2. easily comparable. preferably in dictionary order.
- took a while to write the scoring system.
  + only player1 wins are accurate. The rest might be draws or player2 wins. comparision must also be done in reverse to eliminate draws.
   
** DONE 55 - lychrel numbers
https://en.wikipedia.org/wiki/Lychrel_number
Interesting a simple function can give rise to unsolved problems.
- Just simulated everything.

** DONE 56 - Powerful Digit Sum
for a, b < 100 consider numbers of the form a^b. Which of these has the largest digit sum?
- brute force it with ~LongNums~

** DONE 57 - Square root convergents
x = sqrt(2) - 1, then x = 1/(sqrt(2)+1) = 1/(2 + x). by repeatedly replacing x on the rhs with lhs, we get the continued fraction.
- x_0 = 0
- x_(n+1) = 1/(2+x_n)
- Had to make it Rational{BigInt}; overflowing otherwise

** DONE 58 - Spiral Primes
I've already seen this in [[*28 - Number Spiral Diagonals][28 - Number Spiral Diagonals]].
- now just have to filter primes
- taking too long. even 5000 layer is still not < 10%, i.e., primes upto 25 million.
- for 1000 layers, I have 13.8%
This problem is 5% difficulty, so thinking that I have missed something obvious, I searched for hints online. A few that I looked at just brute forced them using miller-rabin primality test.
- I thought may be I should finally implement an advanced primality test, but then I came across https://en.wikipedia.org/wiki/Primality_test#Number-theoretic_methods
- for all diagonal numbers n, n-1 is easily factorizable.
- So I implemented lucas primality test. https://en.wikipedia.org/wiki/Lucas_primality_test

** DONE 59 - Xor Decryption
- I tried searching for _the _ for 26^3 possible keys.
- Only 6 keys gave plain text that have it.
- Looking at them only one had sensible starting words

** TODO 60 - Prime Pair Sets                            :clique:subgraph:d20:
- Seems like I will be using lots of ~Combinatorics~
- simple brute force is taking too long...
- I first filtered all primes that can be split into primes that can be reverse combined to a new prime.
  + Every pair from the required set will be in this.
  + Now how do I get the required set??? We have a graph in which we need a five nodes that are all connected to each other, i.e, find the complete 5 node subgraph.
  + I should draw the graph and see how it looks, there seem to be atmost 71 edges for 10^4 upperbound.
  + It is still taking too long. How the hell can I get this in <1sec

** DONE 61 - Cyclical Figurate Numbers
Cyclic set of 4-digit numbers:: last two digits of one number are first two digits of the other number; last number and the first form a pair.
Find the sum of only ordered set of six cyclic 4-digit numbers for which each polygonal type([3, 4, 5, 6, 7, 8]) is represented.
- there are 9000 4 digit numbers. binomial(9000, 4) ~ 10^21; full brute search is impossible
- there are less than 100 4-digit triangual numbers. One of them must be in the set.
  + for every number we check if another figurate number with starting two digits exists, if does we keep going.
  + Hmm, we will be essentially doing backtracking.
  + There are only 40 4-digit octagonal numbers; so it is better to start with those.
- I first created a graph.
  + nodes are all _for in 3:8, (i, f(i, n))_, i.e, tuples of all figurate numbers
  + there is a directed edge between two nodes if last two digits of one number are first two digits of other and they are different figurate types
  + In this graph, I need to find cycles of length 6 such that all nodes have different figurate types.
  + I din't find any cycles of length 6, only those from 2:5
    * Haaa, this is just dfs search for a first cycle. It did not represent all cycles.

  + I need to find all figurate unique paths b/w nodes
  + Finding all paths still did not work. :(
  + Figured it out, my copy of visited and unique is not getting refreshed b/w different paths of the same vertices. So it is only working for one path.
:) My first 20% difficulty problem
I need to write a algorithms library. Seems like I'm going to need them from now.

** DONE 62 - Cubic Permutations
Find the smallest cube for which exactly five permutations of its digits are cube.
- full brute search for a set of three permutations in a three digit range is taking > 37seconds
- if x^3 and y^3 are digit permutations of each other, then they must have same number of digits, i.e., (x/y)^3 < 10. So for every number x, we check the range [x+1, x*10^(1/3)] for numbers whose cubes are digit factorials of x^3.
  + If we find 4 other such numbers we have the answer.
  + I found 2 such solutions in 1000:9999 range.

** DONE 63 - Powerful Digit Counts
How many n-digit positive integers exists which are also nth power of a digit.
- +I assume we are not including 1:9 which trivialy satisfy this.+ we are!!
- 1^1 = 1, so should 1 be included in solution?
- 10^(n-1) =< x == d^n < 10^n
  + n-1 < log x < n imples n-1/n < log d < 1 imples n < 1/(1-log d)
  + If we take floor(1/(1-log10(d))) then we have a number of powers of digit d, that are of same digit-length of exponent.

** DONE 64 - Odd Period Square Roots
there is a recurrence relation, b/w a_i and x,y in (sqrt(N) - x)/y.
We start with x=0, y=0. When we finally end up with a same (x, y) the period will be determined.

Wow, this was tricky to get it right.
- I defined a transition b/w two terms (t, t1) of type (a*sqrt(N) - b)/c.
  - t = k + 1/t1; if t is represented by (a, b, c) then t1 will be (ac, x, a*a*N-b*b) where x has a tricky definition.
  - Now I have to continue this transitions untill the state (a, b, c) repeats
I looked in the forum and there are many simpler ways to do this. By going a more generic route, I seem to have complicated things for myself again!!

** DONE 65 - Convergents of e
Julia might make it easy with rational support.
- I had to use Rational{BigInt}, but julia made things very easy.

** DONE 66 - Diophantine Equation                            :pells_equation:
https://en.wikipedia.org/wiki/Chakravala_method
Heuristics to work with chakravala method seems hard to code.
I did a continued fraction representation in 64, so that might be the easier route to take.
Wiki says, (h_i, k_i) is a solution to \( x^2-ny^2\) where \(\dfrac{h_i}{k_i}\) is a convergent to the regular continued fraction of \(\sqrt{n}\).
combined with wikipedia formula on continued fraction convergent gives:
\begin{gather}
  \text{The fundamental solution }(x_1, y_1) =
  \begin{cases}
    (h_{p-1}, k_{p-1}), \text{for p even} \\
    (h_{2p-1}, k_{2p-1}), \text{for p odd}
  \end{cases} \\
  \dfrac{h_n}{k_n} = [a_0; a_1, ..., a_n] \\
  \begin{bmatrix}
    h_n & h_{n-1} \\ k_n & k_{n-1}
  \end{bmatrix}
  =
  \begin{bmatrix}
    a_0 & 1 \\ 1 & 0
  \end{bmatrix}
  ...
  \begin{bmatrix}
    a_n & 1 \\ 1 & 0
  \end{bmatrix}
\end{gather}

** DONE 67 - Maximum Path Sum II
Same solution as problem 18.

** DONE 68 - Magic 5-gon Ring                           :graphics_unfinished:
I transformed this into a graph problem.
- find all possible values for the sum = 1+2+3 -> 6+5+4, i.e., n=[6,15], fix n.
- find all triples (x, y, z) that sum upto n.
- create a graph with nodes as those triples, and edges b/w nodes that have a common number in the triples, label for that edge is the common number.
- find a k-cycle(for k-gon) with disinct edge labels. This gives a magic k-gon.
- [ ] Might be a nice idea to draw a graphviz, or even better a _magic_ looking 5-gon for each one found. Maybe try a custom svg with style sheets(never did that).
- there are a total of 12 magic 5-gons. I need to convert my representation of them into strings required by the question
- only 4 are of length 16
- making sure the cycle is valid, and getting the solution string from the graph representation took too long.

** DONE 69 - Totient Maximum
find the value of n <= 10^6 for which n/phi(n) is maximum.
- ~totient~ added to ~NumberTheory~. direct calculation after prime factorization.
- rest is just foldl to find the maximum
I just did it on the repl, I forgot to write a script.

** DONE 70 - Totient Permutation
- just brute forced it.
- did not run < 1sec.
- there must be a smarter way to do i.

I just looked at the forum and there is a smarter way to do it.

 phi(n)/n = Product{forall p|n}(1-1/p), so for every new prime, the value of phi(n)/n becomes smaller, so we need as few prime factors as possible. If only one prime factor exists, then it will not be a digit permutation. So we search for prime pairs, that give us a digit permutation.

 
** DONE 71 - Ordered Fractions
- n/d < 3/7 implies 7n < 3d so if 7n+1 = 3d, then we get the nearest???
  + 7n+1 = 3d, for d < 10^6 and maximize n
  + (_, 999997) was the solution with maximal n
- Yes we did, I was quite close to the decimal approx. ~round((3/7)*10^6)~ which I tried first.

** DONE 72 - Counting Fractions
How many elements are in the set of proper fractions (n/d) for d < 10^6.

- there are (N-1)^2 pairs to form fractions with.
- some of them form equivalent pairs; when gcd(n, d) > 1.
- So for every d, we have phi(d) proper fractions; so the answer is sum(phi(d))
- ~sum(i -> totient(i, spf_vec), 2:10^6)~

** DONE 73 - Counting Fractions in a Range
- 1/3 < n/d < 1/2 implies 2d < 6n < 3d implies 6n is in [2d+1:3d-1]
- the above will give me all fractions but there will multiple equivalent ones; so I need to ignore n's that are not prime to d.

** DONE 74 - Digit Factorial Chains
- I created an array of transitions, i -> digit_factorial(i)
  + I had to traverse these transitions to ensure that all are filled; some go above the upperbound
- chains can be found by simple ~x = a[x]~ loop
- 3.5secs; I could get this down if I don't actually keep building the chains

** DONE 75 - Singular Integer Right Triangles
- generate pythagorean triples for each length l.
  + If this is a O(1) operation, then 1.5E6 can be done within 1sec.
- for m > n > 0, (m^2-n^2, 2mn, m^2+n^2) is a triple; length = 2m(m+n)
  + there can only be one way the input length l factorized into 2ab with a < b < 2a
- This will only give primitive triples -- if m, n above are coprime -- so we need add all multiples of a primitive l below the upperbound too.
- my solution took 36 seconds
  + ~divisors~ for each number and ~spf_vec~ for 1.5 million numbers should be taking quite a chuck of that.
    * Hmm, spf_vec for 1.5M takes < 1sec
    * I profiled it, ~divisors~ itself is taking most of the time trying out all combinations. I should rewrite that sometime.

** DONE 76 - Counting Summations                                  :partition:
https://en.wikipedia.org/wiki/Integer_partition
- I implemented the recurrence relation(from wiki) the builds upto the required answer

** DONE 77 - Prime Summations                                 :partition:d25:
Partition using only primes. Find the first number that can be written as a sum of primes in > 5000 different ways.
\begin{gather}
sopf(n) = \sum_{p\in\mathbb{P}, p|n}p \\
\kappa(n)=\frac{1}{n}(sopf(n)+\sum_{j=1}^{n−1}sopf(j)\kappa(n - j))
\end{gather}
The above equation is taken from math.stackexchange site, that discusses prime partitions. I'm not sure how it was derived.

If a(n, k) is the number of prime summations of n, using only primes below k, then:
\begin{equation}
a(n, k) = 
\begin{cases}
  a(n, k-1) & \text{if } k \not\in \mathbb{P} \\
  a(n-k, k) + a(n, k-1) & \text{if } k \in \mathbb{P}
\end{cases}
\end{equation}
This worked... had a bit of help from here https://oeis.org/A000607

** DONE 78 - Coin Partitions                                  :partition:d30:
find the least value of n for which 10^6|p(n).
I modified the partitions code for problem 76, to only calculate the values modulo 10^6. This way we do not have to calculate large numbers. We just have to keep going until we find a _n_ such that $p(n) \equiv 0 \mod 10^6$.
** DONE 79 - Passcode Derivation
- if xyz is a login attempt, then indices i_x < i_y < i_z (in original pass and logs)
- if we assume all the characters in password are unique, then we can simple score each character with the number of characters smaller than it and we can obtain, all possible passwords.
- but if we have instances were: i_x < i_y in one attempt and i_y < i_x in another, then either x or y needs to occur multiple times in the password.
- thankfully, this was a easy version of the problem. multiplicity would make this tough.
  + each digit was used only once, so if we collect all digits to the right of each digit, then the last one will have no digits to the right of it.
  + so we can recursively build the password from the right.

** DONE 80 - Square Root digital expansion                              :d20:
I'm planning to calculate the integer square root of (n*10^198) and then sum the digits of the result. Floating point precision is hard to keep track of.
I initially planned to leverage my continuted fractions formula, but this seems easier to reason.
<2025-02-27 Thu> I wasted too much time on this. I should have just used bigints. Atleast I wrote my own ~isqrt_~ function to search for it.
#+begin_src julia
mapfoldl(f, +, filter(x -> isqrt(x)^2 != x, 1:100); init=0)
#+end_src

** DONE 81 - Path Sum: Two Ways
Given an NxN matrix, find a minimal path sum from top-left to bottom-right.
In this problem we can only move down and right. In the next two problems these restrictions are reduced.
- this is quite straight forward. One full iteration of the matrix gives the answer

** TODO 82 - Path Sum: Three Ways                                       :d20:
Here we can move up, down and right. We have to find the minimal path from left edge to right edge.
- I need to be careful of orientation, my ~read_matrix~ function is giving me transpose matrix.

** TODO 83 - PathSum: Four Ways                                         :d25:
Here we can move up, down, left, right. Minimal path from top-left to bottom-right.

** TODO 84 - Monopoly Odds                                              :d35:


** DONE 85 - Counting Rectangles
- let us assume the bottom-right corner is (0, 0) and top-left cornor is (x, y)
- for each (a, b) 0 < a <= x, 0 < b <= y we count the following
  + count all the rectangles with top-left corner at (a, b)
  + this will be a*b
- so the sum will be ab(a+1)(b+1)/4
- now I should find nearest product of two triangular numbers to ub=2*10^6
  + for each triangular number, I will find the maximum triangular that can be multipled to be below ub, and minimum triangular number that can be multiplied to be above ub
  + minimum of all the above collected is our answer.

** TODO 86 - Cuboid Route                                               :d35:
flatten the cuboid and we will find ourself with one side a, and other side (b+c).
If we first choose to meet on the middle of edge _a_, then the smallest distance is
$\sqrt(a^2+(b+c)^2)$. The shortest route candidate needs a to be the largest of (a, b, c).
all permutations only differ in $2\cdot b\cdot c$.
1. find a pythagorian triple (x, y, z) where x < y < z.
2. a = y, b+c = x. So there will be (x-1) cuboids with the smallest distance as integer z.
3. a = x, b+c = y. b and c both must be less than a. $\lfloor y \div 2 \rfloor - x + 2$; Am I double counting here...
I am missing something...

** DONE 87 - Prime Power Triples
How many numbers below 50 million can be expressed as the sum of prime square, cube, 4th power.
- n = p^2 + q^3 + r^4 (p, q, r are primes)
- the number of primes to look at is 331, almost 36 million choices; with numbers going upto 10 trillion.
- solved it, runs in < 0.9sec
  + I only summed the powers if they are below bounds. as the number will be definitely out of bounds, we ignore it and dont store it.

** TODO 88 - Product Sum Numbers                                        :d40:

** TODO 89 - Roman Numerals                                             :d20:
Wow this looks tedious

** TODO 90 - Cube Digit Pairs                                           :d40:
** TODO 91 - Right Triangles With Integer Coordinates                   :d25:
Combinatorics??? Or will it become Diophantine?
A=(a, b) and X=(x, y). Suppose OA is the hypotenuse of OAX.
\begin{gather}
  a^2+b^2 = x^2+y^2+(a-x)^2+(b-x)^2 \Longrightarrow x^2+y^2-ax-by = 0 \\
  (x-\dfrac{a}{2})^2 + (y-\dfrac{b}{2})^2 = \dfrac{a^2+b^2}{4}
\end{gather}
Integer points on the circle with diameter \(\overrightarrow{OA}\).

** DONE 92 - Square Digit Chains
- easier than other chain problems(like factorial) since the upper bound ensures we don't need to do initial transitive closure above the upper bound values
- since I construct the whole chain my solution to longer ~ 3 secs

** TODO 93 - Arithmetic Expressions                                     :d35:
Wow, this is quite different
- I have to find the number of trees possible first.
- Then choose the operators for branching nodes, numbers for leaves.

** DONE 94 - Almost Equilateral Triangles                    :pells_equation:
Almost Equilateral Triangle:: two sides are equal and they differ from the third by atmost 1.
Find the sum of perimeters of all these triangles whose side lengths and area are integral, whose perimeters do not exceed one billion.
\begin{gather}
  n^2 = (\frac{n \pm 1}{2})^2 + x^2 \qquad \Longrightarrow \qquad
  (\frac{3n\pm1}{2})^2 - 3x^2 = 1\\
  Area = x \cdot \frac{n\pm1}{2}
\end{gather}

Now we have pell's equation \(y^2 - 3x^2 = 1\). If \(y \not\equiv 0 (mod 3)\) then it is a solution to our problem.
I just noticed that y cannot be 0 mod 3, otherwise 3 will divide 1.
x=2, y=1 is a fundamental solution to \(x^2-3y^2=1\), so we just need to generate additional solutions within the given bounds and check them for our requirements.
\begin{equation}
\begin{matrix}
  \displaystyle x_{k+1} \\
  y_{k+1}
\end{matrix} = \begin{bmatrix}
  x_1 & y_1 \cdot n \\
  y_1 & x_1
\end{bmatrix}\begin{matrix}
  x_k \\
  y_k
\end{matrix}
\end{equation}
This recurrence relation will give us solution in increasing order, so we can stop when reach the required upperbound.
Perimeter is \(3n\pm2\), so \(n\leq\dfrac{10^9+2}{3}\), i.e., 333333334.
The fundamental solution (2, 1) gives a empty triangle 1-1-0, with zero area, so we need to ignore that. The rest of solutions all give a triangle.
#+begin_src julia
sum(m -> isalmost△(m)[2], pells_3((x, y) -> x > 333333334)) - 2
#+end_src

** DONE 95 - Amicable Chains
I actually forgot that sum of divisors has a closed formula, given a prime factorization. Previously I just got all divisors and summed them up, but the combinatorics was taking too much time.
- with a better sum of divisors, this problem is not much different than other _chain_ problems.
My first 30% problem, this didn't didn't feel that hard.

** TODO 96 - Su Doku                                                    :d25:
I'm finally writing a sudoku solver.

** DONE 97 - Large Non-Mersenne Prime
- rolled my own ~powermod~ instead of using the builtin one.

** TODO 98 - Anagramic Squares                                          :d35:
- two words must be permutations of each other, so the substituted numbers must be digit permutations of each other.
- we can check if two words are permutations by ~count_freq~.
  + first we collect all the permutations into bunches
- if the number of letters is 10, then we > 3million checks to make, that is for just one bunch.


** DONE 99 - Largest Exponential
logarithm is monotonic, so we can compare logarithms instead of exponentials.
I need to learn about floats more. Can I estimate how much error floating point representation causes? How much precision is needed for the given range of numbers??
Let me try this out first.
- it worked, Float64 precision helped. all the numbers seem to be around 6.919e6 range
#+begin_src julia
maximum(i -> reverse(i), enumerate(map(f, ns)))
#+end_src
- with builtin dictionary order comparisons things are becoming easy.

** DONE 100 - Arranged Probability                           :pells_equation:
Let (b, r) be the number of blue and red discs respectively.
- If \(\displaystyle b+r=n\),
  \begin{align}
    \mathbb{P}(BB)=\dfrac{b}{n}\cdot\dfrac{b-1}{n-1} \\
    \mathbb{P}(BB)=\dfrac{1}{2} \Longrightarrow 2b(b-1) = n(n-1) \\
    2(2b-1)^2 - (2n-1)^2=1
  \end{align}
We have pell's equation of the form \(x^2-2y^2=-1\), where \(x=1, y=1\) is a fundamental solution. For negative pell's equations, the additional solutions work a bit differently
\begin{equation}
\begin{matrix}
  x_{k+2} \\
  y_{k+2}
\end{matrix} = \begin{bmatrix}
  x_1^2+ny_1^2 & 2ny_1x_1 \\
  2y_1x_1 & x_1^2+ny_1^2
\end{bmatrix}
\begin{matrix}
  x_k \\
  y_k
\end{matrix}
\end{equation}
So the inner matrix is
\begin{bmatrix}
  3 & 4 \\ 2 & 3
\end{bmatrix}
